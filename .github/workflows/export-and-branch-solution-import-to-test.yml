name: export-and-branch-solution-import-to-test
# This Action:
# Exports Power Apps $DEFAULTSOLUTIOfrom $DEVENVURL dataverse dev environment
# Create a development branch based on Main
# Checks unpacked solution in to dev branch
# rebuilds on $BUILD_ENVIRONMENT_URL build envirnment serer
# imports managed $DEFAULTSOLUTION to $TEST_ENVIRONMETN_URL dataverse test environment
# Create a pull request on the Development branch to check back into MAIN
# to push to $PRODUCTION_ENVIRONMENT_URL,  Create a new Release, which will kick off the Release-Action
#
# Instructions:   
#     (https://learn.microsoft.com/en-us/power-platform/alm/tutorials/github-actions-start)
# Create Required Dev,Test,Build,Prod environments    
#     (https://learn.microsoft.com/en-us/power-platform/alm/tutorials/github-actions-start#create-required-environments)
# Create Service Principal/AAD App Registraion.
#     (https://learn.microsoft.com/en-us/power-platform/alm/tutorials/github-actions-start#create-the-service-principal-account-and-give-it-rights-to-the-environments-created)
#     copy the TenantID, AppID,Client-Secret
# Create an Application User in each of the Dev,Test,Build,Prod environments with the Service Principal
#     (https://learn.microsoft.com/en-us/power-platform/alm/tutorials/github-actions-start#application-user-creation)
# Create a Github Repository Secret and copy the client-secret
#     (https://docs.github.com/en/codespaces/managing-codespaces-for-your-organization/managing-encrypted-secrets-for-your-repository-and-organization-for-github-codespaces)
#     
#     PowerPlatformSPN
#
# Create the following Github Environment Variables and copy their respective values from your dataverse environment:
#     (https://docs.github.com/en/actions/learn-github-actions/variables)
#
#     BUILD_ENVIRONMENT_URL
#     CLIENT_ID
#     DEFAULTSOLUTION
#     DEVENVURL
#     PRODUCTION_ENVIRONMENT__URL
#     TENANT_ID
#     TEST_ENVIRONMENT_URL
# 
# Run Workflow  export-and-branch-solution-import-to-test
#   Select Actions  at top of menu
#   Select export-and-branch-solution-import-to-test
#   Run Workflow
#
# Test the app in the Test Environment
# Create a pull request in the Dev Branch to check into MAIN
#
# To Release to Production:
# Create a new Release. 
# release-solution-to-prod action will run. which will export power apps solution source, send it to the Build environment, builds a managed solution
# then inports to your production environemt.

on:
  workflow_dispatch:
    inputs:

      solution_exported_folder:
        description: 'folder name for staging the exported solution *do not change*'
        required: true
        default: out/exported/
      solution_folder:
        description: 'staging the unpacked solution folder before check-in *do not change*'
        required: true
        default: out/solutions/
      solution_target_folder: 
       description: 'folder name to be created and checked in *do not change*'
       required: true
       default: solutions/
  
permissions:
  contents: write
jobs:
  export-from-dev:
    runs-on: windows-latest
    # or you can say runs-on: ubuntu-latest
    env:
      RUNNER_DEBUG: 1

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true

    - name: who-am-i action
      uses: microsoft/powerplatform-actions/who-am-i@v0
      with:
        environment-url: ${{vars.DEVENVURL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{vars.TENANT_ID}}

    - name: export-solution action
      uses: microsoft/powerplatform-actions/export-solution@v0
      with:
        environment-url: ${{vars.DEVENVURL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.PowerPlatformSPN }}
        tenant-id: ${{vars.TENANT_ID}}
        solution-name: ${{vars.DEFAULTSOLUTION}}
        solution-output-file: ${{ github.event.inputs.solution_exported_folder}}/${{ vars.DEFAULTSOLUTION }}.zip

    - name: unpack-solution action
      uses: microsoft/powerplatform-actions/unpack-solution@v0
      with:
        solution-file: ${{ github.event.inputs.solution_exported_folder}}/${{ vars.DEFAULTSOLUTION }}.zip
        solution-folder: ${{ github.event.inputs.solution_folder}}/${{ vars.DEFAULTSOLUTION }}
        solution-type: 'Unmanaged'
        overwrite-files: true
        
    #- name: git delete current dev branch
    #  continue-on-error: true
    #  run: git branch -D ${{ vars.DEFAULTSOLUTION }}
      
    - name: branch-solution, prepare it for a PullRequest
      uses: microsoft/powerplatform-actions/branch-solution@v0
      with:
        solution-folder: ${{ github.event.inputs.solution_folder}}/${{ vars.DEFAULTSOLUTION }}
        solution-target-folder: ${{ github.event.inputs.solution_target_folder}}/${{ vars.DEFAULTSOLUTION }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        branch-name: ${{ vars.DEFAULTSOLUTION }}
        clobber-branch: true
        allow-empty-commit: true

  Import-to-test:
    needs: [ export-from-dev ]
    uses: ./.github/workflows/import-to-test.yml     
    secrets:
      envSecret: ${{ secrets.PowerPlatformSPN }}
      
